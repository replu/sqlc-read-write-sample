// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/replu/sqlc-read-write-sample/internal/util/database"
)

const userCreate = `-- name: UserCreate :execresult
INSERT INTO users(
    name
) VALUE (
  ?
)
`

func (q *Queries) UserCreate(ctx context.Context, name string) (sql.Result, error) {
	var qq DBTX
	tx, err := database.GetTxFromContext(ctx)
	if err != nil {
		return nil, err
	}
	if tx != nil {
		qq = q.WithTx(tx).writerDB
	} else {
		qq = q.writerDB
	}

	return qq.ExecContext(ctx, userCreate, name)
}

const userGet = `-- name: UserGet :one
SELECT id, name, created_at, updated_at
FROM users
WHERE
  id = ?
`

func (q *Queries) UserGet(ctx context.Context, id uint64) (User, error) {
	var qq DBTX
	tx, err := database.GetTxFromContext(ctx)
	if err != nil {
		return User{}, err
	}
	if tx != nil {
		qq = q.WithTx(tx).writerDB
	} else {
		qq = q.readerDB
	}

	row := qq.QueryRowContext(ctx, userGet, id)
	var i User
	err = row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
